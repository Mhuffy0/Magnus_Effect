#version 430
layout(local_size_x=16, local_size_y=16) in;
// f arrays: image2DArray of R32F with 9 layers
layout(binding=0, r32f) uniform writeonly image2DArray fTex; // write f_i
layout(binding=1, r8ui) uniform uimage2D maskImg;            // solid mask
layout(std140, binding=2) uniform Init {
  ivec2 size;
  float rho0;      // 1.0
  float Uin;       // 0.05
} I;

const vec2 c[9] = vec2[9](
  vec2(0,0), vec2(1,0), vec2(0,1), vec2(-1,0), vec2(0,-1),
  vec2(1,1), vec2(-1,1), vec2(-1,-1), vec2(1,-1)
);
const float w[9] = float[9](4.0/9.0,1.0/9.0,1.0/9.0,1.0/9.0,1.0/9.0,1.0/36.0,1.0/36.0,1.0/36.0,1.0/36.0);

void main(){
  ivec2 p = ivec2(gl_GlobalInvocationID.xy);
  if (any(greaterThanEqual(p, I.size))) return;
  if (imageLoad(maskImg,p).r != 0u) {
    // solid: zero velocity, near-rest distribution
    for (int i=0;i<9;i++) imageStore(fTex, ivec3(p,i), vec4(w[i]*I.rho0,0,0,0));
    return;
  }
  vec2 u = vec2(I.Uin, 0.0);
  float uu = dot(u,u);
  for (int i=0;i<9;i++){
    float cu = dot(c[i], u);
    float feq = w[i]*I.rho0*(1.0 + 3.0*cu + 4.5*cu*cu - 1.5*uu);
    imageStore(fTex, ivec3(p,i), vec4(feq,0,0,0));
  }
}