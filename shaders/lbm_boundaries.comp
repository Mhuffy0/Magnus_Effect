#version 430
layout(local_size_x=16, local_size_y=16) in;

layout(binding=0, r32f) uniform image2DArray fA; 
layout(binding=1, r8ui)  uniform readonly uimage2D maskImg; // อ่านอย่างเดียว
layout(std140, binding=2) uniform Bc { ivec2 size; float rho0; float Uin; } B;

const int   opp[9] = int[9](0,3,4,1,2,7,8,5,6);
const vec2  c[9]   = vec2[9]( vec2(0,0), vec2(1,0), vec2(0,1), vec2(-1,0), vec2(0,-1),
                              vec2(1,1), vec2(-1,1), vec2(-1,-1), vec2(1,-1) );
const float w[9]   = float[9](4.0/9.0,1.0/9.0,1.0/9.0,1.0/9.0,1.0/9.0,1.0/36.0,1.0/36.0,1.0/36.0,1.0/36.0);

void main(){
  ivec2 p  = ivec2(gl_GlobalInvocationID.xy);
  ivec2 sz = B.size;
  if (any(greaterThanEqual(p, sz))) return;
  if (imageLoad(maskImg, p).r != 0u) return;

  // Inlet
  if (p.x == 0){
    vec2 u = vec2(B.Uin, 0.0); float uu = dot(u,u);
    for (int i=0;i<9;i++){
      float cu = dot(c[i], u);
      float feq = w[i]*B.rho0*(1.0 + 3.0*cu + 4.5*cu*cu - 1.5*uu);
      imageStore(fA, ivec3(p,i), vec4(feq,0,0,0));
    }
    return;
  }

  // Outlet: copy from neighbor (zero-gradient)
  if (p.x == sz.x-1){
    ivec2 src = ivec2(sz.x-2, p.y);
    for (int i=0;i<9;i++){
      vec4 v = imageLoad(fA, ivec3(src,i));
      imageStore(fA, ivec3(p,i), v);
    }
    return;
  }
}
